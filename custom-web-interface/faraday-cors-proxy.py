#!/usr/bin/env python3
"""
Proxy CORS pour Faraday
Permet d'acc√©der √† l'API Faraday depuis un navigateur web en contournant les restrictions CORS
"""

from http.server import HTTPServer, BaseHTTPRequestHandler
import urllib.request
import urllib.parse
import json
import base64
from urllib.error import HTTPError, URLError
import logging

# Configuration
FARADAY_URL = "http://localhost:5985"
PROXY_PORT = 8082

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class CORSProxyHandler(BaseHTTPRequestHandler):
    def do_OPTIONS(self):
        """G√©rer les requ√™tes preflight CORS"""
        self.send_response(200)
        self.send_cors_headers()
        self.end_headers()
    
    def do_GET(self):
        """G√©rer les requ√™tes GET"""
        self.proxy_request()
    
    def do_POST(self):
        """G√©rer les requ√™tes POST"""
        self.proxy_request()
    
    def do_PUT(self):
        """G√©rer les requ√™tes PUT"""
        self.proxy_request()
    
    def do_DELETE(self):
        """G√©rer les requ√™tes DELETE"""
        self.proxy_request()
    
    def send_cors_headers(self):
        """Envoyer les headers CORS n√©cessaires"""
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-CSRFToken')
        self.send_header('Access-Control-Expose-Headers', 'X-CSRFToken')
        self.send_header('Access-Control-Allow-Credentials', 'true')
    
    def proxy_request(self):
        """Faire le proxy de la requ√™te vers Faraday"""
        try:
            # Construire l'URL de destination
            if self.path.startswith('/'):
                target_url = FARADAY_URL + self.path
            else:
                target_url = FARADAY_URL + '/' + self.path
            
            logging.info(f"Proxying {self.command} {self.path} -> {target_url}")
            
            # Pr√©parer les headers
            headers = {}
            for header, value in self.headers.items():
                if header.lower() not in ['host', 'origin']:
                    headers[header] = value
            
            # Lire le body si pr√©sent
            content_length = int(self.headers.get('Content-Length', 0))
            body = None
            if content_length > 0:
                body = self.rfile.read(content_length)
            
            # Cr√©er la requ√™te
            req = urllib.request.Request(target_url, data=body, headers=headers, method=self.command)
            
            # Faire la requ√™te vers Faraday
            try:
                response = urllib.request.urlopen(req, timeout=30)
                
                # Envoyer la r√©ponse
                self.send_response(response.status)
                self.send_cors_headers()
                
                # Copier les headers de la r√©ponse
                for header, value in response.headers.items():
                    if header.lower() not in ['access-control-allow-origin', 'access-control-allow-methods', 
                                              'access-control-allow-headers', 'access-control-expose-headers',
                                              'access-control-allow-credentials']:
                        self.send_header(header, value)
                
                self.end_headers()
                
                # Copier le contenu de la r√©ponse
                response_data = response.read()
                self.wfile.write(response_data)
                
                logging.info(f"Success: {response.status} - {len(response_data)} bytes")
                
            except HTTPError as e:
                # Erreur HTTP de Faraday
                self.send_response(e.status)
                self.send_cors_headers()
                
                # Copier les headers d'erreur
                for header, value in e.headers.items():
                    if header.lower() not in ['access-control-allow-origin', 'access-control-allow-methods', 
                                              'access-control-allow-headers', 'access-control-expose-headers',
                                              'access-control-allow-credentials']:
                        self.send_header(header, value)
                
                self.end_headers()
                
                # Copier le contenu d'erreur
                error_data = e.read()
                self.wfile.write(error_data)
                
                logging.warning(f"HTTP Error: {e.status} - {e.reason}")
                
            except URLError as e:
                # Erreur de connexion
                self.send_response(502)
                self.send_cors_headers()
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                
                error_response = {
                    "error": "Impossible de se connecter au serveur Faraday",
                    "details": str(e.reason),
                    "faraday_url": FARADAY_URL
                }
                self.wfile.write(json.dumps(error_response).encode())
                
                logging.error(f"Connection Error: {e.reason}")
        
        except Exception as e:
            # Erreur g√©n√©rale
            self.send_response(500)
            self.send_cors_headers()
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            
            error_response = {
                "error": "Erreur interne du proxy",
                "details": str(e)
            }
            self.wfile.write(json.dumps(error_response).encode())
            
            logging.error(f"Internal Error: {str(e)}")
    
    def log_message(self, format, *args):
        """D√©sactiver les logs par d√©faut (on utilise logging)"""
        pass

def main():
    print(f"üöÄ D√©marrage du proxy CORS pour Faraday")
    print(f"üì° Serveur Faraday: {FARADAY_URL}")
    print(f"üåê Proxy disponible sur: http://localhost:{PROXY_PORT}")
    print(f"üí° Utilisez http://localhost:{PROXY_PORT} comme baseURL dans votre interface")
    print("=" * 60)
    
    try:
        # Tester la connexion √† Faraday
        test_req = urllib.request.Request(f"{FARADAY_URL}/_api/v3/info")
        test_response = urllib.request.urlopen(test_req, timeout=5)
        data = json.loads(test_response.read().decode())
        print(f"‚úÖ Connexion √† Faraday r√©ussie - Version: {data.get('Version', 'Unknown')}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Attention: Impossible de se connecter √† Faraday ({e})")
        print("   Le proxy va quand m√™me d√©marrer...")
    
    print("=" * 60)
    
    # D√©marrer le serveur proxy
    server = HTTPServer(('localhost', PROXY_PORT), CORSProxyHandler)
    
    try:
        print("üü¢ Proxy CORS d√©marr√© ! Arr√™t avec Ctrl+C")
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüî¥ Arr√™t du proxy CORS")
        server.shutdown()

if __name__ == "__main__":
    main()
