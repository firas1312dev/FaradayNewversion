#!/usr/bin/env python3
"""
üîß Script de Diagnostic Faraday Server
Diagnostique et r√©sout les probl√®mes de d√©marrage du serveur Faraday
"""

import os
import sys
import time
import subprocess
import socket
import requests
import psutil
from pathlib import Path

def print_header(title):
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def print_step(step, description):
    print(f"\nüìã √âtape {step}: {description}")
    print("-" * 50)

def check_port(port, host='localhost'):
    """V√©rifie si un port est ouvert"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(3)
        result = sock.connect_ex((host, port))
        sock.close()
        return result == 0
    except:
        return False

def kill_process_on_port(port):
    """Tue le processus utilisant un port sp√©cifique"""
    try:
        for proc in psutil.process_iter(['pid', 'name', 'connections']):
            try:
                connections = proc.info['connections']
                if connections:
                    for conn in connections:
                        if conn.laddr.port == port:
                            print(f"   üî´ Arr√™t du processus {proc.info['name']} (PID: {proc.info['pid']}) sur port {port}")
                            psutil.Process(proc.info['pid']).terminate()
                            time.sleep(2)
                            if psutil.pid_exists(proc.info['pid']):
                                psutil.Process(proc.info['pid']).kill()
                            return True
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        return False
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erreur lors de l'arr√™t du processus: {e}")
        return False

def check_faraday_installation():
    """V√©rifie l'installation de Faraday"""
    print_step(1, "V√©rification de l'installation Faraday")
    
    # V√©rifier Python
    python_version = sys.version_info
    print(f"   üêç Python: {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    if python_version < (3, 7):
        print("   ‚ùå Python 3.7+ requis")
        return False
    
    # V√©rifier Faraday
    faraday_paths = [
        Path("faraday"),
        Path("../faraday"),
        Path("../../faraday"),
        Path("C:/Users/LENOVO/OneDrive/Bureau/faraday/faraday")
    ]
    
    faraday_root = None
    for path in faraday_paths:
        if path.exists() and (path / "manage.py").exists():
            faraday_root = path.resolve()
            break
    
    if faraday_root:
        print(f"   ‚úÖ Faraday trouv√©: {faraday_root}")
        return faraday_root
    else:
        print("   ‚ùå Faraday non trouv√©")
        return False

def check_database():
    """V√©rifie la base de donn√©es"""
    print_step(2, "V√©rification de la base de donn√©es")
    
    try:
        # V√©rifier PostgreSQL
        if check_port(5432):
            print("   ‚úÖ PostgreSQL d√©tect√© (port 5432)")
            return True
        else:
            print("   ‚ö†Ô∏è PostgreSQL non d√©tect√©, utilisation SQLite")
            return True
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erreur base de donn√©es: {e}")
        return True

def check_faraday_config(faraday_root):
    """V√©rifie la configuration Faraday"""
    print_step(3, "V√©rification de la configuration")
    
    try:
        config_path = faraday_root / "faraday_data" / "config"
        if config_path.exists():
            print(f"   ‚úÖ Dossier config: {config_path}")
        else:
            print(f"   ‚ö†Ô∏è Cr√©ation du dossier config: {config_path}")
            config_path.mkdir(parents=True, exist_ok=True)
        
        # V√©rifier server.ini
        server_ini = config_path / "server.ini"
        if not server_ini.exists():
            print("   üìù Cr√©ation du fichier server.ini")
            with open(server_ini, 'w') as f:
                f.write("""[database]
connection_string = sqlite:///faraday_data/faraday.db

[server]
bind_address = 0.0.0.0
port = 5985
websocket_port = 9000
session_timeout = 43200

[storage]
path = faraday_data/storage

[reports]
path = faraday_data/uploaded_reports
""")
        
        print(f"   ‚úÖ Configuration: {server_ini}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur configuration: {e}")
        return False

def start_faraday_server(faraday_root):
    """D√©marre le serveur Faraday"""
    print_step(4, "D√©marrage du serveur Faraday")
    
    # Nettoyer le port 5985
    if check_port(5985):
        print("   üîÑ Port 5985 occup√©, nettoyage...")
        kill_process_on_port(5985)
        time.sleep(3)
    
    try:
        # Changer vers le dossier Faraday
        original_cwd = os.getcwd()
        os.chdir(faraday_root)
        
        # Diff√©rentes m√©thodes de d√©marrage
        start_commands = [
            [sys.executable, "manage.py", "runserver"],
            [sys.executable, "-m", "faraday.server.web"],
            ["faraday-server"],
            [sys.executable, "start_server.py"]
        ]
        
        for i, cmd in enumerate(start_commands, 1):
            print(f"   üöÄ Tentative {i}: {' '.join(cmd)}")
            
            try:
                # D√©marrer le processus en arri√®re-plan
                if os.name == 'nt':  # Windows
                    process = subprocess.Popen(
                        cmd,
                        creationflags=subprocess.CREATE_NEW_CONSOLE,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE
                    )
                else:  # Linux/Mac
                    process = subprocess.Popen(
                        cmd,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE
                    )
                
                # Attendre le d√©marrage
                print("   ‚è≥ Attente du d√©marrage...")
                for attempt in range(15):  # 15 secondes max
                    time.sleep(1)
                    if check_port(5985):
                        print(f"   ‚úÖ Serveur d√©marr√© sur le port 5985 !")
                        os.chdir(original_cwd)
                        return process
                    
                    # V√©rifier si le processus est encore vivant
                    if process.poll() is not None:
                        stdout, stderr = process.communicate()
                        print(f"   ‚ùå Processus termin√©")
                        if stderr:
                            print(f"   üìù Erreur: {stderr.decode()[:200]}")
                        break
                
                # Arr√™ter le processus si pas de succ√®s
                try:
                    process.terminate()
                    process.wait(timeout=5)
                except:
                    process.kill()
                
            except Exception as e:
                print(f"   ‚ùå Erreur commande {i}: {e}")
                continue
        
        os.chdir(original_cwd)
        print("   ‚ùå Aucune m√©thode de d√©marrage n'a fonctionn√©")
        return None
        
    except Exception as e:
        print(f"   ‚ùå Erreur g√©n√©rale: {e}")
        return None

def test_faraday_api():
    """Teste l'API Faraday"""
    print_step(5, "Test de l'API Faraday")
    
    try:
        # Test de connexion basic
        response = requests.get(
            "http://localhost:5985/_api/v3/info",
            auth=("faraday", "faraday"),
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ API accessible")
            print(f"   üìä Version: {data.get('version', 'N/A')}")
            print(f"   üìä Faraday: {data.get('faraday_version', 'N/A')}")
            return True
        else:
            print(f"   ‚ùå API erreur HTTP {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("   ‚ùå Impossible de se connecter √† l'API")
        return False
    except Exception as e:
        print(f"   ‚ùå Erreur API: {e}")
        return False

def show_logs(faraday_root):
    """Affiche les logs r√©cents"""
    print_step(6, "V√©rification des logs")
    
    try:
        logs_path = faraday_root / "faraday_data" / "logs"
        if logs_path.exists():
            log_files = list(logs_path.glob("*.log"))
            if log_files:
                latest_log = max(log_files, key=os.path.getmtime)
                print(f"   üìã Log le plus r√©cent: {latest_log}")
                
                try:
                    with open(latest_log, 'r', encoding='utf-8', errors='ignore') as f:
                        lines = f.readlines()
                        last_lines = lines[-20:] if len(lines) > 20 else lines
                        
                    print("   üìù Derni√®res lignes du log:")
                    for line in last_lines:
                        print(f"      {line.strip()}")
                        
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Erreur lecture log: {e}")
            else:
                print("   ‚ö†Ô∏è Aucun fichier log trouv√©")
        else:
            print("   ‚ö†Ô∏è Dossier logs non trouv√©")
            
    except Exception as e:
        print(f"   ‚ùå Erreur logs: {e}")

def main():
    print_header("DIAGNOSTIC SERVEUR FARADAY")
    
    # √âtape 1: V√©rification installation
    faraday_root = check_faraday_installation()
    if not faraday_root:
        print("\n‚ùå Installation Faraday non trouv√©e")
        return False
    
    # √âtape 2: V√©rification base de donn√©es
    check_database()
    
    # √âtape 3: V√©rification configuration
    if not check_faraday_config(faraday_root):
        print("\n‚ùå Probl√®me de configuration")
        return False
    
    # √âtape 4: D√©marrage serveur
    process = start_faraday_server(faraday_root)
    if not process:
        print("\n‚ùå Impossible de d√©marrer le serveur")
        show_logs(faraday_root)
        return False
    
    # √âtape 5: Test API
    api_ok = test_faraday_api()
    
    # √âtape 6: Logs si probl√®me
    if not api_ok:
        show_logs(faraday_root)
    
    # R√©sum√©
    print_header("R√âSUM√â")
    
    services_status = [
        ("Faraday Server", check_port(5985), "http://localhost:5985"),
        ("API Faraday", api_ok, "http://localhost:5985/_api/v3/info")
    ]
    
    all_ok = True
    for service, status, url in services_status:
        status_text = "‚úÖ OK" if status else "‚ùå ERREUR"
        print(f"{service:15}: {status_text} - {url}")
        if not status:
            all_ok = False
    
    if all_ok:
        print("\nüéâ SERVEUR FARADAY OP√âRATIONNEL !")
        print("üîó Vous pouvez maintenant d√©marrer le proxy et l'interface")
    else:
        print("\n‚ö†Ô∏è PROBL√àMES D√âTECT√âS")
        print("üîß Consultez les logs ci-dessus pour plus de d√©tails")
    
    return all_ok

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüõë Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
    
    input("\nAppuyez sur Entr√©e pour continuer...")
