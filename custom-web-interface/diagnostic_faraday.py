#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß Script de Diagnostic et Red√©marrage Faraday
Diagnostique les probl√®mes et red√©marre tous les services
"""

import os
import sys
import time
import signal
import socket
import subprocess
import psutil
import requests
from pathlib import Path

def print_header(title):
    print(f"\n{'='*60}")
    print(f"üîß {title}")
    print(f"{'='*60}")

def print_step(step_num, description):
    print(f"\nüìç √âtape {step_num}: {description}...")

def check_port(port, host='localhost'):
    """V√©rifier si un port est ouvert"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(2)
        result = sock.connect_ex((host, port))
        sock.close()
        return result == 0
    except:
        return False

def kill_processes_on_port(port):
    """Tuer tous les processus utilisant un port sp√©cifique"""
    killed = 0
    for proc in psutil.process_iter(['pid', 'name', 'connections']):
        try:
            for conn in proc.info['connections'] or []:
                if conn.laddr.port == port:
                    print(f"   üî¥ Arr√™t du processus {proc.info['name']} (PID: {proc.info['pid']})")
                    proc.kill()
                    killed += 1
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return killed

def test_faraday_api():
    """Tester la connectivit√© de l'API Faraday"""
    try:
        auth = ('faraday', 'faraday')
        response = requests.get('http://localhost:5985/_api/v3/info', 
                              auth=auth, timeout=5)
        return response.status_code == 200
    except:
        return False

def main():
    print_header("DIAGNOSTIC ET RED√âMARRAGE FARADAY SERVER")
    
    # √âtape 1: Diagnostic des ports
    print_step(1, "Diagnostic des ports")
    ports = {5985: "Faraday Server", 8082: "Proxy CORS", 8888: "Serveur Web"}
    
    for port, service in ports.items():
        is_open = check_port(port)
        status = "üü¢ OUVERT" if is_open else "üî¥ FERM√â"
        print(f"   Port {port} ({service}): {status}")
    
    # √âtape 2: Arr√™t des processus sur les ports
    print_step(2, "Nettoyage des ports")
    for port in ports.keys():
        if check_port(port):
            killed = kill_processes_on_port(port)
            if killed > 0:
                print(f"   ‚úÖ {killed} processus arr√™t√©s sur le port {port}")
    
    # Attente pour le nettoyage
    print("   ‚è≥ Attente de 3 secondes pour le nettoyage...")
    time.sleep(3)
    
    # √âtape 3: V√©rification des dossiers
    print_step(3, "V√©rification des dossiers")
    
    faraday_root = Path("C:/Users/LENOVO/OneDrive/Bureau/faraday/faraday")
    web_interface = Path("C:/Users/LENOVO/OneDrive/Bureau/faraday/faraday/custom-web-interface")
    
    if not faraday_root.exists():
        print(f"   ‚ùå Dossier Faraday non trouv√©: {faraday_root}")
        return False
    
    if not web_interface.exists():
        print(f"   ‚ùå Dossier interface web non trouv√©: {web_interface}")
        return False
    
    print(f"   ‚úÖ Dossier Faraday: {faraday_root}")
    print(f"   ‚úÖ Dossier interface: {web_interface}")
    
    # √âtape 4: D√©marrage de Faraday Server
    print_step(4, "D√©marrage du serveur Faraday")
    os.chdir(faraday_root)
    
    try:
        # Tentative avec manage.py
        cmd = [sys.executable, "manage.py", "runserver", 
               "--host", "0.0.0.0", "--port", "5985"]
        
        print(f"   üöÄ Commande: {' '.join(cmd)}")
        
        # D√©marrer dans un nouveau processus
        if os.name == 'nt':  # Windows
            subprocess.Popen(cmd, creationflags=subprocess.CREATE_NEW_CONSOLE)
        else:
            subprocess.Popen(cmd)
        
        print("   ‚è≥ Attente de 10 secondes pour le d√©marrage...")
        time.sleep(10)
        
        # Test de connectivit√©
        if check_port(5985):
            print("   ‚úÖ Serveur Faraday d√©marr√© !")
            
            # Test API
            if test_faraday_api():
                print("   ‚úÖ API Faraday fonctionnelle !")
            else:
                print("   ‚ö†Ô∏è Port ouvert mais API non accessible")
        else:
            print("   ‚ùå √âchec du d√©marrage du serveur Faraday")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors du d√©marrage: {e}")
        return False
    
    # √âtape 5: D√©marrage du proxy CORS
    print_step(5, "D√©marrage du proxy CORS")
    os.chdir(web_interface)
    
    if (web_interface / "cors-proxy-enhanced.py").exists():
        cmd = [sys.executable, "cors-proxy-enhanced.py"]
        print(f"   üöÄ Commande: {' '.join(cmd)}")
        
        if os.name == 'nt':
            subprocess.Popen(cmd, creationflags=subprocess.CREATE_NEW_CONSOLE)
        else:
            subprocess.Popen(cmd)
        
        time.sleep(3)
        
        if check_port(8082):
            print("   ‚úÖ Proxy CORS d√©marr√© !")
        else:
            print("   ‚ö†Ô∏è Probl√®me avec le proxy CORS")
    else:
        print("   ‚ùå Fichier cors-proxy-enhanced.py non trouv√©")
    
    # √âtape 6: D√©marrage du serveur web
    print_step(6, "D√©marrage du serveur web")
    
    cmd = [sys.executable, "-m", "http.server", "8888"]
    print(f"   üöÄ Commande: {' '.join(cmd)}")
    
    if os.name == 'nt':
        subprocess.Popen(cmd, creationflags=subprocess.CREATE_NEW_CONSOLE)
    else:
        subprocess.Popen(cmd)
    
    time.sleep(2)
    
    if check_port(8888):
        print("   ‚úÖ Serveur web d√©marr√© !")
    else:
        print("   ‚ö†Ô∏è Probl√®me avec le serveur web")
    
    # √âtape 7: Ouverture de l'interface
    print_step(7, "Ouverture de l'interface")
    
    interface_url = "http://localhost:8888/index-new.html"
    
    try:
        if os.name == 'nt':
            os.system(f'start {interface_url}')
        elif os.name == 'posix':
            os.system(f'open {interface_url}')  # macOS
        else:
            os.system(f'xdg-open {interface_url}')  # Linux
        
        print(f"   ‚úÖ Interface ouverte: {interface_url}")
    except:
        print(f"   ‚ö†Ô∏è Ouverture manuelle requise: {interface_url}")
    
    # R√©sum√© final
    print_header("R√âSUM√â DU D√âMARRAGE")
    
    services_status = [
        ("Faraday Server", 5985, "http://localhost:5985"),
        ("Proxy CORS", 8082, "http://localhost:8082"),
        ("Interface Web", 8888, "http://localhost:8888/index-new.html")
    ]
    
    all_ok = True
    for service, port, url in services_status:
        status = "‚úÖ OK" if check_port(port) else "‚ùå ERREUR"
        print(f"{service:15} (port {port}): {status} - {url}")
        if not check_port(port):
            all_ok = False
    
    if all_ok:
        print("\nüéâ TOUS LES SERVICES SONT D√âMARR√âS AVEC SUCC√àS !")
        print("üìä Vous pouvez maintenant utiliser l'interface Faraday")
    else:
        print("\n‚ö†Ô∏è CERTAINS SERVICES ONT DES PROBL√àMES")
        print("üîß V√©rifiez les logs dans les fen√™tres de console ouvertes")
    
    return all_ok

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüõë Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
    
    input("\nAppuyez sur Entr√©e pour continuer...")
